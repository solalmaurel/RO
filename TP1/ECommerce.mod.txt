
###############################  Model ###############################



###############################  Sets  ###############################

set DEMMANDES; 

set FLUIDES;	

set MAGASINS;

################### Variables ###################

var X{i in FLUIDES, j in MAGASINS, k in DEMMANDES}, >=0; 


###################  Constants: Data to load   #########################

param demandesFluides{i in DEMMANDES, j in FLUIDES};

param stocks{i in MAGASINS, j in FLUIDES};

param couts{i in MAGASINS, j in FLUIDES};


################### Constraints ###################


s.t. respectStock{i in FLUIDES, j in MAGASINS}:
  sum{k in DEMMANDES} X[i,j,k] <= stocks[j,i];

s.t. respectDemandes{i in FLUIDES, j in DEMMANDES}:
  sum{k in MAGASINS} X[i,k,j] == demandesFluides[j,i];


###### Objective ######

minimize Cout{k in DEMMANDES}: 
	sum{i in FLUIDES} sum{j in MAGASINS} X[i,j,k]*couts[j,i]; 

#end;


#default data

data;

set DEMMANDES := 
D1
D2;

set FLUIDES :=
F1
F2;

set MAGASINS :=
M1
M2
M3;

param demandesFluides: F1 F2 :=
D1 2 0
D2 1 3;

param stocks: F1 F2 :=
M1 2.5 1
M2 1 2
M3 2 1;

param couts: F1 F2 :=
M1 1 1
M2 2 3
M3 3 2;


end;